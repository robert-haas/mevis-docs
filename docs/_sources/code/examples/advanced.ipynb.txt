{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc191d89",
   "metadata": {},
   "source": [
    "# Advanced usage\n",
    "\n",
    "This Jupyter notebook shows some advanced features of the Python package [mevis](https://pypi.org/project/mevis). The .ipynb file can be found [here](https://github.com/robert-haas/mevis/tree/master/examples).\n",
    "\n",
    "The central function of this package is `mv.plot` for visualizing OpenCog's [AtomSpaces](https://wiki.opencog.org/w/AtomSpace). Internally it calls three functions that are also relevant for users:\n",
    "\n",
    "1. `mv.filter` to reduce the AtomSpace to a selection of some [Atoms](https://wiki.opencog.org/w/Atom) of interest.\n",
    "\n",
    "   Its arguments enable various ways of filtering:\n",
    "   - `target` select some Atoms\n",
    "   - `context` decides whether the selection is expanded to some context around the Atoms\n",
    "     - `\"atom\"`: no extension of the selection\n",
    "     - `\"in\"`: extension to incoming Atoms, can be done `n` times by passing a tuple `(\"in\", n)`\n",
    "     - `\"out\"`: extension to outgoing Atoms, can be done `n` times with `(\"out\", n)` \n",
    "     - `\"in_out\"`: extension to incoming and outgoing Atoms, can be done `n` times with `(\"in_out\", n)`, which means an extension to a neighborhood of size `n`\n",
    "     - `\"subgraph\"`: extension to the entire subgraph, which means using the selected Atoms as roots and following their outgoing edges until reaching only leaves\n",
    "   - `mode` decides whether the selected Atoms are included to or excluded from the output\n",
    "2. `mv.convert` to transform an AtomSpace to a normal graph with two types of nodes, which correspond to OpenCog's [Node](https://wiki.opencog.org/w/Node) and [Link](https://wiki.opencog.org/w/Link) types.\n",
    "   - Several arguments allow to add annotations to the graph, e.g. node label, size, color and shape, or edge label and color. These annotations are recognized by the plotting function and translated into visual elements and their appearance.\n",
    "3. `mv.layout` to calculate x and y coordinates for each node in the graph.\n",
    "   - Several layout methods are available. Some depend on Graphviz (e.g. `neato`, `dot`, `twopi`), others come with NetworkX (e.g. `bipartite`, `shell`, `spring`).\n",
    "\n",
    "These three functions can also be called by the user, for example to apply multiple filtering steps one after another, or to export the resulting annotated graph to a gml file for external tools. Note that `mv.plot` can also use a graph object as input, but most arguments are ignored in that case, because no filter, convert and layout steps are performed in that case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51a0be7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mevis as mv\n",
    "from opencog.atomspace import types"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18827875",
   "metadata": {},
   "source": [
    "## Load an AtomSpace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d5896c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "atomspace = mv.load('moses.scm')\n",
    "\n",
    "mv.plot(atomspace, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e46ef47b",
   "metadata": {},
   "source": [
    "## Filter an AtomSpace\n",
    "\n",
    "The filter function needs an AtomSpace or a list of Atoms as input and returns a list of Atoms. There are multiple ways to specify which Atoms shall be filtered.\n",
    "\n",
    "### 1) By an Atom or a list of Atoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9125863",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = atomspace.get_atoms_by_type(types.Link)\n",
    "atoms = mv.filter(atomspace, target=atoms)\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52f8209b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "atom = list(atomspace)[7]\n",
    "print(atom)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdf5aa28",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "for context in ('atom', 'in', 'out', 'both', 'in-tree', 'out-tree', ('in', 2), ('out', 2), ('both', 2)):\n",
    "    # Print current context\n",
    "    print()\n",
    "    print('Filter context: \"{}\"'.format(context))\n",
    "    \n",
    "    # Apply filter with current context\n",
    "    atoms = mv.filter(atomspace, target=atom, context=context)\n",
    "    \n",
    "    # Convert atoms to graph, increase size of the root atom from which the selection is expanded to some context\n",
    "    graph = mv.convert(atoms, node_size=lambda a: 18 if a == atom else 10)\n",
    "    \n",
    "    # Calculate a hierarchical layout with dot from Graphviz\n",
    "    graph = mv.layout(graph, 'dot')\n",
    "    \n",
    "    # Plot and display\n",
    "    fig = mv.plot(graph)\n",
    "    fig.display(inline='True')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3834459",
   "metadata": {},
   "source": [
    "### 2) By an Atom name or a list of Atom names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f07f244a",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target=['$2', '$3'], context='in')\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6786e1e3",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "for context_size in (0, 1, 2, 3):\n",
    "    print('Context size {}'.format(context_size))\n",
    "    atoms = mv.filter(atomspace, target='$2', context=('in', context_size))\n",
    "    mv.plot(atoms, 'vis', 'dot').display(inline='True')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb1962f",
   "metadata": {},
   "source": [
    "### 3) By an Atom type or a list of Atom types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adc132eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target=['AndLink', 'OrLink', 'NotLink'])\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e86ce59",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target=types.PredicateNode, mode='exclude')\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52656691",
   "metadata": {},
   "source": [
    "### 4) By a function that returns True or False\n",
    "\n",
    "The function gets an Atom as input and needs to return True or False, which causes the Atom to be selected or deselected, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "972d08dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def select(atom):\n",
    "    if atom.name.startswith('$'):\n",
    "        return False\n",
    "    return True\n",
    "\n",
    "atoms = mv.filter(atomspace, target=select)\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15459283",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target=select, mode='exclude')\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c1fb716",
   "metadata": {},
   "source": [
    "Python's lambda functions are also accepted and often more concise. Essentially they are unnamed functions and don't use the return keyword."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64e71a9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target=lambda atom: atom.is_link())\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "902553d5",
   "metadata": {},
   "source": [
    "### 5) By a combination of the previous\n",
    "\n",
    "The result of one call can be used as input for another call. This enables sequential filtering, i.e. changing the subset of selected Atoms step-by-step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61f9ab2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = mv.filter(atomspace, target='OrLink', context='out-tree')\n",
    "atoms = mv.filter(atoms, target=lambda atom: atom.name.startswith('$'), mode='exclude')\n",
    "mv.plot(atoms, 'vis', 'dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c1b6367",
   "metadata": {},
   "source": [
    "## Convert an AtomSpace to a graph\n",
    "\n",
    "The `convert` function needs an AtomSpace or a list of Atoms as input and returns a DiGraph or Graph object from the NetworkX library, depending on whether the `graph_directed` argument is set to True or False, respectively. By default it adds some annotations to the graph like `node_color`, but it can be turned off by setting `graph_annotated=False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f1806c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = mv.convert(atomspace)\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab33eeb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = mv.convert(atomspace, graph_annotated=False, graph_directed=False)\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c10306c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = mv.convert(\n",
    "    atomspace, node_color='#000099', node_shape='hexagon', node_size=20,\n",
    "    edge_color='lightgray', edge_size=4)\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc829130",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_node_color(atom):\n",
    "    if atom.is_node():\n",
    "        return 'red'\n",
    "    elif atom.type_name == 'AndLink':\n",
    "        return 'blue'\n",
    "    elif atom.type_name == 'OrLink':\n",
    "        return 'green'\n",
    "    elif atom.type_name == 'NotLink':\n",
    "        return 'orange'\n",
    "\n",
    "graph = mv.convert(atomspace, graph_directed=False, node_color=calc_node_color, node_size=16, edge_color='gray')\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "222ec16b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_color(atom):\n",
    "    if atom.is_node():\n",
    "        return 'red'\n",
    "    if atom.type_name == 'AndLink':\n",
    "        return 'blue'\n",
    "    if atom.type_name == 'OrLink':\n",
    "        return 'green'\n",
    "    return 'orange'\n",
    "\n",
    "def calc_shape(atom):\n",
    "    if atom.type_name == 'AndLink':\n",
    "        return 'rectangle'\n",
    "    if atom.type_name == 'OrLink':\n",
    "        return 'hexagon'\n",
    "    return 'circle'\n",
    "\n",
    "\n",
    "graph = mv.convert(\n",
    "    atomspace,\n",
    "    graph_directed=False,\n",
    "    \n",
    "    node_label=lambda atom: atom.name if atom.is_node() else atom.type_name.replace('Link', ''),\n",
    "    node_color=calc_color,\n",
    "    node_opacity=0.9,\n",
    "    node_size=lambda atom: 20 if atom.type_name in ['AndLink', 'OrLink'] else 12,\n",
    "    node_shape=calc_shape,\n",
    "    node_border_color='white',\n",
    "    node_border_size=2.0,\n",
    "    node_label_color=calc_color,\n",
    "    node_label_size=12.0,\n",
    "    node_hover=lambda atom: 'A {} with Atomese code:\\n{}'.format(atom.type_name, atom.short_string()),\n",
    "    node_click=lambda atom: atom.short_string(),\n",
    "    node_image=None,\n",
    "    node_properties=lambda atom: dict(x=-300) if atom.is_node() else dict(x=-300+200*len(atom.out)),\n",
    "    \n",
    "    edge_label=lambda atom1, atom2: '{}{}'.format(atom1.type_name[0], atom2.type_name[0]),\n",
    "    edge_color=lambda atom1, atom2: 'lightgray' if atom2.is_node() else calc_color(atom1),\n",
    "    edge_opacity=0.5,\n",
    "    edge_size=lambda atom1, atom2: 5 if atom2.is_node() else 2.5,\n",
    "    edge_label_color=lambda atom1, atom2: calc_color(atom1),\n",
    "    edge_label_size=8,\n",
    "    edge_hover=lambda atom1, atom2: '{} to {}'.format(atom1.type_name, atom2.type_name),\n",
    "    edge_click=lambda atom1, atom2: 'Edge connects {} with {}'.format(atom1.type_name, atom2.type_name),\n",
    ")\n",
    "\n",
    "mv.plot(graph, 'd3', edge_curvature=0.2, show_edge_label=True, many_body_force_strength=-1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83177478",
   "metadata": {},
   "source": [
    "## Layout a graph\n",
    "\n",
    "The layout function needs a DiGraph or Graph object from NetworkX as input, but also accepts an AtomSpace or list of Atoms, which it passes through the `convert` function to get a graph. It returns a graph with x and y coordinates as node annotations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14c75d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = mv.layout(atomspace, 'dot')\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc706af9",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = mv.layout(graph, 'twopi')\n",
    "\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e83ae1",
   "metadata": {},
   "source": [
    "## Explicitly use filter, convert and layout\n",
    "\n",
    "Calling these functions explicitly allows to use the resulting graph for different purposes, such as inspecting, plotting or exporting it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3468aa10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter\n",
    "atoms = atomspace.get_atoms_by_type(types.Node)  # an efficient OpenCog function, it includes subtypes by default!\n",
    "atoms = mv.filter(atoms, target=atoms, context=('in', 1))\n",
    "\n",
    "# convert\n",
    "graph = mv.convert(\n",
    "    atoms,\n",
    "    node_label=lambda atom: atom.name if atom.is_node() else atom.type_name.replace('Link', ''),\n",
    "    node_size=lambda atom: 3 * (len(atom.out) + 2),\n",
    "    node_shape=lambda atom: 'rectangle' if atom.is_node() else 'circle',\n",
    "    edge_color='#bbbbbb')\n",
    "\n",
    "# layout\n",
    "graph = mv.layout(graph, 'neato')\n",
    "\n",
    "# export: possible because the individual functions were used and only the result is put into plot()\n",
    "mv.export(graph, 'moses_filtered_annotated.gml', overwrite=True)\n",
    "\n",
    "# plot\n",
    "mv.plot(graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c153d657",
   "metadata": {},
   "source": [
    "## Implicitly use filter, convert and layout\n",
    "\n",
    "Calling these functions implicitly during plotting can be done by providing corresponding arguments. It does not allow to use the resulting graph for other purposes, and it does not enable sequential filtering steps, but the basic use case of filter → convert → layout → plot becomes easier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04ab4f0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# shorter: plot with arguments for the internally called filter, convert and layout functions\n",
    "mv.plot(\n",
    "    atomspace,\n",
    "    layout_method='neato',\n",
    "    filter_target=lambda atom: atom.is_node(),\n",
    "    filter_context=('in', 1),\n",
    "    node_label=lambda atom: atom.name if atom.is_node() else atom.type_name.replace('Link', ''),\n",
    "    node_size=lambda atom: 3 * (len(atom.out) + 2),\n",
    "    node_shape=lambda atom: 'rectangle' if atom.is_node() else 'circle',\n",
    "    edge_color='#bbbbbb',\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
